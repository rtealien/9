def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var10 = func3(arg2, arg1)
    var36 = func4(arg1, arg2)
    var40 = func6(var7, arg1)
    var41 = arg1 | 747937148 & var40 + arg1
    var42 = var41 ^ var40
    var43 = var36 & (((var10 | var7) | var36 + (arg1 - 773 + var7 - (-1580880830 + var41 & var7 ^ var36 ^ var36))) & (var7 | 858))
    var44 = var43 ^ 732
    result = (var42 + (arg1 & (var40 & 135286463) - 357995989)) | var36 + (var10 - arg2)
    return result
def func4(arg11, arg12):
    def func5(arg13, arg14):
        var15 = arg11 & arg13
        var16 = arg11 + arg14 | (-950 ^ var15 + (var15 | (arg11 | arg12 | arg12 + ((arg12 - 996 - arg14 | arg11) + arg11 - -379) & 350)) | 230081722 | (-202 ^ -1897940620))
        if arg13 < arg12:
            var17 = arg11 ^ var15
        else:
            var17 = arg13 - (arg14 + arg11) - var16 - ((var16 ^ var16) | (arg14 ^ (arg14 | (arg13 - (((arg12 | (arg11 & -526)) & var16) - (arg13 - arg14 | arg13 & -1056373610) & var16 - var16)) - var15) | arg11) | arg14)
        var18 = ((arg14 + 1532291583) | (arg12 ^ arg13 + (212 & arg14))) ^ arg13
        var19 = var15 - ((arg12 | var18) & arg13 & var18) ^ var16 & var15 & var16
        result = (var19 - arg12) | (var16 ^ (-197 - arg13)) & (arg11 + var15 & 2102412006 - arg13 & (var15 ^ 59) - -28760019)
        return result
    var20 = func5(arg12, arg11)
    var21 = (arg12 & -677 | var20) | -1891627015
    var22 = arg11 + (arg11 - arg12)
    var23 = var20 + var22 + arg12 ^ 274
    var24 = var21 + (var23 | var20 - var20)
    var25 = 987306665 + (var24 ^ arg12) ^ 972
    var26 = var22 ^ arg12
    var27 = (-245047517 | (var26 | var24)) & var26
    var28 = (var22 ^ var25) - var27
    var29 = var22 & var21
    var30 = arg11 + (arg12 - arg11) | var23
    var31 = (var20 & 860716521) - var20
    var32 = var20 - -358576804
    var33 = var31 ^ (arg12 | var20 | var32)
    if var25 < arg11:
        var34 = var26 - (arg11 + var27) | arg12
    else:
        var34 = (var26 - var28) ^ (var22 | var24)
    var35 = var22 ^ 150
    result = var32 | var31
    return result
def func3(arg8, arg9):
    result = arg9 & -573 - -46153012
    return result
def func2(arg3, arg4):
    var5 = 0
    for var6 in range(26):
        var5 += -1 | var6 + arg4
    return var5
def func6(arg37, arg38):
    def func7(acc, rest):
        var39 = (rest | -3) - 0
        if acc == 0:
            return var39
        else:
            result = func7(acc - 1, var39)
            return result
    result = func7(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 45'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
